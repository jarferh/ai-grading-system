<?php
session_start();
include '../includes/db.php';
include '../includes/auth.php';

requireStudent();

header('Content-Type: application/json');

$assignment_id = $_POST['assignment_id'];
$student_id = $_POST['student_id'];
$content = $_POST['content'];

// Check if the student has already submitted this assignment
$stmt = $conn->prepare("SELECT id FROM submissions WHERE student_id = :student_id AND assignment_id = :assignment_id");
$stmt->execute([
    'student_id' => $student_id,
    'assignment_id' => $assignment_id
]);
$existingSubmission = $stmt->fetch(PDO::FETCH_ASSOC);

if ($existingSubmission) {
    echo json_encode([
        'success' => false,
        'error' => 'You have already submitted this assignment.'
    ]);
    exit();
}

// Fetch assignment question
$stmt = $conn->prepare("SELECT description FROM assignments WHERE id = :assignment_id");
$stmt->execute(['assignment_id' => $assignment_id]);
$assignment = $stmt->fetch(PDO::FETCH_ASSOC);
$question = $assignment['description'];

// Call the Gemini API to generate feedback and score
function callGeminiAPI($prompt) {
    $apiKey = "AIzaSyDsEJyQgh_XMGQsOv3CndiDWvcw3W8OHms"; // Replace with your Gemini API key
    $url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=$apiKey";

    // Prepare the request payload
    $data = [
        "contents" => [
            [
                "parts" => [
                    ["text" => $prompt]
                ]
            ]
        ]
    ];

    // Initialize cURL
    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_HTTPHEADER, [
        'Content-Type: application/json'
    ]);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));

    // Execute the request
    $response = curl_exec($ch);

    // Check for errors
    if (curl_errno($ch)) {
        throw new Exception("cURL Error: " . curl_error($ch));
    }

    // Close cURL
    curl_close($ch);

    // Decode the response
    return json_decode($response, true);
}

try {
    // Generate the prompt for the Gemini API
    $prompt = "You are an automated grading assistant. Grade the following student answer based on the given question and provide a short and constructive feedback to the student on wht to improve.\n\n" .
              "Question:\n" . $question . "\n\n" .
              "Student Answer:\n" . $content . "\n\n" .
              "Please evaluate the answer based on:\n" .
              "NOTE : the complete mark is 100% here is how the mark should be allocated(10% is for attendance(every student must have) , 10% is for grammer clearity , 70% is the accuracy of the answer to the question , 10% is for originality)".
              "1. Understanding of the topic\n" .
              "2. Completeness of the response\n" .
              "3. Accuracy of information\n" .
              "4. Clarity and organization\n\n" .
              "Respond in the exact following plain text format without any markdown or additional annotations:\n\n" .
              "Grade: [0-100]\nFeedback: [Your detailed feedback here]";

    // Call the Gemini API
    $response = callGeminiAPI($prompt);

    // Log the raw response for debugging
    error_log("Gemini API Response: " . print_r($response, true));

    // Extract the generated text
    $generatedText = $response['candidates'][0]['content']['parts'][0]['text'] ?? null;

    if (!$generatedText) {
        throw new Exception("No feedback generated by the Gemini API.");
    }

    // Parse the grade and feedback from the response
    $grade = 0;
    $feedback = "No feedback available.";

    // Extract the grade
    if (preg_match("/Grade:\s*(\d+)/i", $generatedText, $gradeMatches)) {
        $grade = (int)$gradeMatches[1];
    } else {
        // If grade is not found, assume the entire response is feedback
        $feedback = $generatedText;
        throw new Exception("Grade not found in the response. Only feedback was generated.");
    }

    // Extract the feedback
    if (preg_match("/Feedback:\s*(.+)/is", $generatedText, $feedbackMatches)) {
        $feedback = trim($feedbackMatches[1]);
    } else {
        // If feedback is not found, use the entire response as feedback
        $feedback = $generatedText;
    }

    // Start a database transaction
    $conn->beginTransaction();

    // Insert submission into the database
    $stmt = $conn->prepare("INSERT INTO submissions (student_id, assignment_id, content, submission_date) VALUES (:student_id, :assignment_id, :content, NOW())");
    $stmt->execute([
        'student_id' => $student_id,
        'assignment_id' => $assignment_id,
        'content' => $content
    ]);

    // Get the submission ID
    $submission_id = $conn->lastInsertId();

    // Insert the grade into the database
    $stmt = $conn->prepare("INSERT INTO grades (submission_id, score, remarks) VALUES (:submission_id, :score, :remarks)");
    $stmt->execute([
        'submission_id' => $submission_id,
        'score' => $grade,
        'remarks' => $feedback
    ]);

    // Commit the transaction
    $conn->commit();

    // Calculate percentage
    $percentage = $grade;

    // Return results as JSON
    echo json_encode([
        'success' => true,
        'score' => $grade,
        'percentage' => $percentage,
        'feedback' => $feedback
    ]);
} catch (Exception $e) {
    // Rollback the transaction if an error occurs
    if (isset($conn) && $conn->inTransaction()) {
        $conn->rollBack();
    }

    // Log the error
    error_log("Error: " . $e->getMessage());

    // Return error as JSON
    echo json_encode([
        'success' => false,
        'error' => $e->getMessage()
    ]);
}
?>